!/ ------------------------------------------------------------------- /
      MODULE W3SIC2MD
!/
!/                  +-----------------------------------+
!/                  | WAVEWATCH III           NOAA/NCEP |
!/                  |           E. Rogers               |
!/                  |           S. Zieger               |
!/                  |           F. Ardhuin              |
!/                  |                        FORTRAN 90 |
!/                  | Last update :         10-Mar-2014 |
!/                  +-----------------------------------+
!/
!/    10-Mar-2014 : Generalization with turbulent BL    ( version 5.01 )
!/
!/    For updates see W3SIC1 documentation.
!/
!  1. Purpose :
!
!     Calculate ice dissipation source term S_{ice}.
!          Exponential decay rate according to Liu et al., which 
!          uses as input: 1) ice thickness, and 2) an eddy
!          viscosity parameter. This method is non-uniform in
!          frequency. This is discussed further below, in 
!          subroutine "LIU_REVERSE_DISPERSION".
!
!          Includes generalization by F. Ardhuin with viscous and tubulent 
!          boundary layers. That part is activating by setting namelist 
!          parameters that define the under-ice roughness and a friction 
!          coefficient. For example: &IC2 IC2TURB = 1. , IC2ROUGH =0.02
!
!        References for Subtype 2:
!              Liu et al.    1991: JGR 96 (C3), 4605-4621
!              Liu and Mollo 1988: JPO 18       1720-1712 
!
!  2. Variables and types :
!
!  3. Subroutines and functions :
!
!      Name      Type  Scope    Description
!     ----------------------------------------------------------------
!      W3SIC2                 Subr. Public   Ice source term.
!      LIU_FORWARD_DISPERSION Subr. Private  Dispersion relation calc.
!      LIU_REVERSE_DISPERSION Subr. Private  Dispersion relation calc.
!     ----------------------------------------------------------------
!
!  4. Subroutines and functions used :
!
!     See subroutine documentation.
!
!  5. Remarks :
!
!     Reference:Rogers, W.E. and M.D. Orzech, 2013: Implementation and
!        Testing of Ice and Mud Source Functions in WAVEWATCH III(R), 
!        NRL/MR/7320--13-9462, 31pp.
!        available from http://www7320.nrlssc.navy.mil/pubs.php
!        Direct link: 
!        http://www7320.nrlssc.navy.mil/pubs/2013/rogers2-2013.pdf
!
!  6. Switches :
!
!     See subroutine documentation.
!
!  7. Source code :
!/
!/ ------------------------------------------------------------------- /
!/
      PUBLIC  :: W3SIC2
      PRIVATE :: LIU_FORWARD_DISPERSION, LIU_REVERSE_DISPERSION
!/
      CONTAINS
!/ ------------------------------------------------------------------- /
      SUBROUTINE W3SIC2 (A, DEPTH, CG, WN, IX, IY, S, D)
!/
!/                  +-----------------------------------+
!/                  | WAVEWATCH III           NOAA/NCEP |
!/                  |           E. Rogers               |
!/                  |           S. Zieger               |
!/                  |           F. Ardhuin              |
!/                  |                        FORTRAN 90 |
!/                  | Last update :         10-Mar-2014 |
!/                  +-----------------------------------+
!/
!/    16-Oct-2012 : Origination.                        ( version 4.04 )
!/                                                        (E. Rogers)
!/    09-Oct-2013 : W3SIC1 SUBTYPE=2 outsourced to W3SIC2 (S. Zieger)
!/    10-Mar-2014 : Generalization with turbulent BL    ( version 5.01)
!/
!/        FIXME   : Move field input to W3SRCE and provide
!/     (S.Zieger)   input parameter to W3SIC1 to make the subroutine
!/                : versatile for point output processors ww3_outp
!/                  and ww3_ounp.
!/
!/    Copyright 2009 National Weather Service (NWS),
!/       National Oceanic and Atmospheric Administration.  All rights
!/       reserved.  WAVEWATCH III is a trademark of the NWS. 
!/       No unauthorized use without permission.
!/
!  1. Purpose :
!
!     S_{ice} source term using 5 parameters read from input files.
!     These parameters are allowed to vary in space and time.
!     The parameters control the exponential decay rate k_i
!     Since there are 5 parameters, this permits description of
!     dependence of k_i on frequency or wavenumber.
!
!/ ------------------------------------------------------------------- /
!
!  2. Method :
!
!     Regarding i/o (general to all Sice modules): S_{ice} source term
!     is calculated using up to 5 parameters read from input files.
!     These parameters are allowed to vary in space and time.
!     The parameters control the exponential decay rate k_i
!     Since there are 5 parameters, this permits description of
!     dependence of k_i on frequency or wavenumber.
!
!     Sea ice affects the wavenumber k of wind-generated ocean waves.
!     The ice-modified wavenumber can be expressed as a complex number
!     k = k_r + i*k_i, with the real part k_r representing impact of
!     the sea ice on the physical wavelength and propagation speeds, 
!     producing something analogous to shoaling and refraction by 
!     bathymetry, whereas the imaginary part of the complex 
!     wavenumber, k_i, is an exponential decay coefficient 
!     k_i(x,y,t,sigma) (depending on location, time and frequency, 
!     respectively), representing wave attenuation, and can be 
!     introduced in a wave model such as WW3 as S_ice/E=-2*Cg*k_i, 
!     where S_ice is one of several dissipation mechanisms, along 
!     with whitecapping, for example, S_ds=S_wc+S_ice+â‹¯. The k_r - 
!     modified by ice would enter the model via the C calculations 
!     on the left-hand side of the governing equation.The fundamentals
!     are straightforward, e.g. Rogers and Holland (2009 and 
!     subsequent unpublished work) modified a similar model, SWAN 
!     (Booij et al. 1999) to include the effects of a viscous mud 
!     layer using the same approach (k = k_r + i*k_i) previously.
!
!     General approach is analogous to Rogers and Holland (2009) 
!         approach for mud.
!     See text near their eq. 1 :
!       k        = k_r  +  i * k_i
!       eta(x,t) = Real( a * exp( i * ( k * x - sigma * t ) ) )
!       a        = a0 * exp( -k_i * x )
!       S / E    = -2 * Cg * k_i (see also Komen et al. (1994, pg. 170)
!
!     Please note that S is source term for action. 
!
!     Notes regarding numerics:
!     Experiments with constant k_i values suggest that :
!       for dx=20.0 km, k_i should not exceed 3.5e-6
!      (assumes 2.7% Hs error in my particular test case is intolerable)
!       for dx=5.0 km,  k_i should not exceed 2.0e-5
!       for dx=2.5 km,  k_i should not exceed 5.0e-5
!       for dx=1.0 km,  k_i should not exceed 2.0e-4
!       for dx=0.35 km, error is less than 2.1% for all k_i tested
!       for dx=0.10 km, error is less than 1.3% for all k_i tested
!     "Ground truth" used for this is an exponential decay profile.
!
!      For reference, ACNFS is 1/12th deg, so delta_latitude=9.25 km.
!
!     {put more equations here}
!
!  3. Parameters :
!
!     Parameter list
!     ----------------------------------------------------------------
!       A       R.A.   I   Action density spectrum (1-D)
!       DEPTH   Real   I   Local water depth
!       CG      R.A.   I   Group velocities.
!       WN      R.A.   I   Wavenumbers.
!       IX,IY   I.S.   I   Grid indices.
!       S       R.A.   O   Source term (1-D version).
!       D       R.A.   O   Diagonal term of derivative (1-D version).
!       imported via module: 
!       ICEP1   R.A.   I   Ice thickness
!       ICEP2   R.A.   I   Eddy viscosity
!     ----------------------------------------------------------------
!
!  4. Subroutines used :
!
!      Name      Type  Module   Description
!     ----------------------------------------------------------------
!      STRACE    Subr. W3SERVMD Subroutine tracing (!/S switch).
!      PRT2DS    Subr. W3ARRYMD Print plot output (!/T1 switch).
!      OUTMAT    Subr. W3ARRYMD Matrix output (!/T2 switch).
!     ----------------------------------------------------------------
!
!  5. Called by :
!
!      Name      Type  Module   Description
!     ----------------------------------------------------------------
!      W3SRCE    Subr. W3SRCEMD Source term integration.
!      W3EXPO    Subr.   N/A    ASCII Point output post-processor.
!      W3EXNC    Subr.   N/A    NetCDF Point output post-processor.
!      GXEXPO    Subr.   N/A    GrADS point output post-processor.
!     ----------------------------------------------------------------
!
!  6. Error messages :
!
!     None.
!
!  7. Remarks :
!
!     If ice parameter 1 is zero, no calculations are made.
!
!  8. Structure :
!
!     See source code.
!
!  9. Switches :
!
!     !/S  Enable subroutine tracing.
!     !/T   Enable general test output.
!     !/T0  2-D print plot of source term.
!     !/T1  Print arrays.
!
! 10. Source code :
!
!/ ------------------------------------------------------------------- /
      USE CONSTANTS
      USE W3ODATMD, ONLY: NDSE
      USE W3SERVMD, ONLY: EXTCDE
      USE W3GDATMD, ONLY: NK, NTH, NSPEC, SIG, MAPWN, IC2PARS, DDEN,  & 
                          FLAGLL, YGRD, GTYPE, RLGTYPE
      USE W3IDATMD, ONLY: FLAGS,ICEP1,ICEP2,ICEP3,ICEP4,ICEP5,WLEV,ICEI
!/T      USE W3ODATMD, ONLY: NDST
!/S      USE W3SERVMD, ONLY: STRACE
!/T0      USE W3ARRYMD, ONLY: PRT2DS
!/T1      USE W3ARRYMD, ONLY: OUTMAT
!
      IMPLICIT NONE
!/
!/ ------------------------------------------------------------------- /
!/ Parameter list
      REAL, INTENT(IN)        :: A(NSPEC), DEPTH
      REAL, INTENT(IN)        :: CG(NK),   WN(NK)
      REAL, INTENT(OUT)       :: S(NSPEC), D(NSPEC)
      INTEGER, INTENT(IN)     :: IX, IY
!/
!/ ------------------------------------------------------------------- /
!/ Local parameters
!/
!/S      INTEGER, SAVE           :: IENT = 0
!/T0      INTEGER                 :: ITH
!/T0      REAL                    :: DOUT(NK,NTH)
      INTEGER                 :: IKTH, IK
      REAL                    :: D1D(NK) !In SBT1: D1D was named "CBETA"
      REAL                    :: ICECOEF1, ICECOEF2, ICECOEF3, &
                                 ICECOEF4, ICECOEF5, ICECONC
      REAL, ALLOCATABLE       :: WN_I(:)  ! exponential decay rate for amplitude
      REAL                    :: WN_R, CG_ICE(NK)
      REAL                    :: ALPHA ! exponential decay rate for energy
      REAL                    :: VISCM=1.83E-6 ! molecular viscosity of water at freezing
      REAL                    :: PTURB, PVISC, DTURB, DVISC,   & 
                                 SMOOTH, RE, UORB, AORB, EB,   &
                                 DELI1, DELI2, FW, XI, FTURB
      INTEGER                 :: IND, ITH, IS
      LOGICAL                 :: NOICE=.FALSE.
                                       ! ALPHA = 2 * WN_I
!/
!/ ------------------------------------------------------------------- /
!/
!/S      CALL STRACE (IENT, 'W3SIC2')
!
! 0.  Initializations ------------------------------------------------ *
!
      D        = 0.0
!
      ALLOCATE(WN_I(NK))
      WN_I     = 0.0
      ICECOEF1 = 0.0
      ICECOEF2 = 0.0
      ICECOEF3 = 0.0
      ICECOEF4 = 0.0
      ICECOEF5 = 0.0
      ICECONC  = 0.0
!
      IF (FLAGS(-7)) ICECOEF1 = ICEP1(IX,IY)
      IF (FLAGS(-6)) ICECOEF2 = ICEP2(IX,IY)
      IF (FLAGS(-5)) ICECOEF3 = ICEP3(IX,IY)
      IF (FLAGS(-4)) ICECOEF4 = ICEP4(IX,IY)
      IF (FLAGS(-3)) ICECOEF5 = ICEP5(IX,IY)
      IF (FLAGS(4))  ICECONC = ICEI(IX,IY)

!
!
! 1.  No ice --------------------------------------------------------- /
!
      NOICE=.FALSE.
      IF (ICECOEF1==0.0) NOICE=.TRUE.
      IF (FLAGS(4).AND.(ICECONC==0.0)) NOICE=.TRUE.

      IF ( NOICE ) THEN
         D = 0.0
!
! 2.  Ice ------------------------------------------------------------ /
      ELSE
!
! 2.a Set constant(s) and write test output -------------------------- /
!
!         (none)
!
!/T38        WRITE (NDST,9000) DEPTH,ICECOEF1,ICECOEF2,ICECOEF3,ICECOEF4
!
! 2.b Make calculations ---------------------------------------------- /
         IF (.NOT.FLAGS(-7))THEN
            WRITE (NDSE,1001) 'ICE PARAMETER 1'
            CALL EXTCDE(2)
         ENDIF
         IF (.NOT.FLAGS(-6))THEN
            WRITE (NDSE,1001) 'ICE PARAMETER 2'
            CALL EXTCDE(2)
         ENDIF

         !  ICECOEF1 = H_ICE
         !  ICECOEF2 = VISC

         IF (IC2PARS(1).GT.0.5) THEN 
           DO IK=1, NK
             CALL LIU_FORWARD_DISPERSION (ICECOEF1,ICECOEF2,DEPTH, &
                  SIG(IK)/TPI,WN_R,CG_ICE(IK),ALPHA)
             WN_I(IK) = 0.5 * ALPHA !  ALPHA=2*WN_I
             END DO
!
           DO IK=1, NK
!             recall that D=S/E=-2*Cg*k_i
             D1D(IK)= -2.0 * CG_ICE(IK) * WN_I(IK)
             END DO
!
! Alternative by F.A. 
!
         ELSE ! so case of IC2PARS(1).LE.0.5
           IF (IC2PARS(2).GT.0.) THEN 
             UORB=0.
             AORB=0.
             FTURB = IC2PARS(2)
             IF (IC2PARS(7).GT.0) THEN 
               IF (YGRD(IY,IX).LT.0.AND.GTYPE.EQ.RLGTYPE.AND.FLAGLL) FTURB = IC2PARS(7)
               END IF
             DO IK=1, NK
               EB  = 0.
               DO ITH=1, NTH
                 IS=ITH+(IK-1)*NTH
                 EB  = EB  + A(IS)
                 END DO   
!
!  UORB and AORB are the variances of the orbital velocity and surface elevation
!
               UORB = UORB + EB *SIG(IK)**2 * DDEN(IK) / CG(IK)
               AORB = AORB + EB             * DDEN(IK) / CG(IK)  !deep water only
               END DO
!
             AORB = 2*SQRT(AORB)  ! significant amplitude 
             UORB = 2*SQRT(UORB)  ! significant amplitude

             RE = UORB*AORB / VISCM
             SMOOTH = 0.5*TANH((RE-IC2PARS(4))/IC2PARS(5))
             PTURB=(0.5+SMOOTH)
             PVISC=(0.5-SMOOTH)

             XI=(ALOG10(MAX(AORB/IC2PARS(3),3.))-ABMIN)/DELAB
             IND  = MIN (SIZEFWTABLE-1, INT(XI))
             DELI1= MIN (1. ,XI-FLOAT(IND))
             DELI2= 1. - DELI1
             FW =FWTABLE(IND)*DELI2+FWTABLE(IND+1)*DELI1
             DTURB=-1.* FTURB*FW*UORB/GRAV
           ELSE ! so case of IC2PARS(2).LE.0.
             DTURB = 0.
           END IF ! IF (IC2PARS(2).GT.0.)  

           DO IK=1, NK
             DVISC = -1. *IC2PARS(6) * WN(IK) * SQRT(VISCM* SIG(IK) / 2.) 
             D1D(IK) = PTURB*DTURB*SIG(IK)**2 +  PVISC*DVISC
             END DO
           END IF !  IF (IC2PARS(1).GT.0.5)

!
! 2.c Fill diagional matrix
!
          DO IKTH=1, NSPEC
            D(IKTH) = D1D(MAPWN(IKTH))
            END DO
!
        END IF !    IF ( NOICE ) THEN
!
      S = D * A
!
! ... Test output of arrays
!
!/T0      DO IK=1, NK
!/T0        DO ITH=1, NTH
!/T0          DOUT(IK,ITH) = D(ITH+(IK-1)*NTH)
!/T0          END DO
!/T0        END DO
!
!/T0      CALL PRT2DS (NDST, NK, NK, NTH, DOUT, SIG(1:), '  ', 1.,    &
!/T0                         0.0, 0.001, 'Diag Sice', ' ', 'NONAME')
!
!/T1      CALL OUTMAT (NDST, D, NTH, NTH, NK, 'diag Sice')
!
! Formats
!
 1001 FORMAT (/' *** WAVEWATCH III ERROR IN W3SIC2 : '/               &
               '     ',A,' REQUIRED BUT NOT SELECTED'/)
!
!/T38 9000 FORMAT (' TEST W3SIC2 : DEPTH,ICECOEF1  : ',2E10.3)
!/
!/ End of W3SIC2 ----------------------------------------------------- /
!/
      END SUBROUTINE W3SIC2
!/ ------------------------------------------------------------------- /
!/
      SUBROUTINE LIU_FORWARD_DISPERSION (H_ICE,VISC,H_WDEPTH,FWANTED &
                                         ,K_SOLUTION,CG,ALPHA)
!/
!/                  +-----------------------------------+
!/                  | WAVEWATCH III           NOAA/NCEP |
!/                  |        W. E. Rogers (NRL-SSC)     |
!/                  |                        FORTRAN 90 |
!/                  | Last update :         11-Oct-2013 |
!/                  +-----------------------------------+
!/
!/    16-Oct-2012 : Origination.                        ( version 4.04 )
!/                                                        (E. Rogers)
!/
!  1. Purpose :
!
!     Dispersion relation calculation: given frequency, find k
!     This is for dispersion in ice, so it requires the ice thickness
!     and viscosity also. (the latter is the "eddy viscosity in the 
!     turbulent boundary layer beneath the ice.").
!
!     This subroutine also calculates Cg and alpha.
!     alpha is the exponential decay rate of *energy*  (not to be 
!     confused  with k_i which is the exponential decay rate of 
!     amplitude)
!
!     References:
!     N/A here, but see subroutine "Liu_reverse_dispersion"
!
!  2. Method :
!
!     Newton-Raphson. 
!     For actual dispersion relation, see documentation of subroutine
!     "Liu_reverse_dispersion"
!
!  3. Parameters :
!
!      Parameter list
!     ----------------------------------------------------------------
!      H_ICE      REAL    I  Ice thickness
!      VISC       REAL    I  Eddy viscosity (m2/sec)
!      H_WDEPTH   REAL    I  Water depth
!      FWANTED    REAL    I  Wave frequency
!      K_SOLUTION REAL    O  Frequency
!      CG         REAL    O  Group velocity 
!      ALPHA      REAL    O  Exponential decay rate of energy 
!     ----------------------------------------------------------------
!
!  4. Subroutines used :
!
!      Name                   | Type |  Module | Description
!     ----------------------------------------------------------------
!      Liu_reverse_dispersion | Subr.| W3SIC2MD| As name implies. 
!      STRACE                 | Subr.| W3SERVMD| Subroutine tracing.
!      WAVNU1                 | Subr.| W3DISPMD| Wavenumber for waves
!                                                in open water.
!     ----------------------------------------------------------------
!
!  5. Called by :
!
!      Name                   | Type |  Module | Description
!     ----------------------------------------------------------------
!      W3SIC2                 | Subr.| W3SIC2MD| S_ice source term
!     ----------------------------------------------------------------
!
!  6. Error messages :
!
!     Fails if solution is not found in a given number of iterations
!
!  7. Remarks :
!
!     Eventually, k and Cg should be used for propagation. This is not 
!     implemented yet. For now, it is only used to calculate the source
!     term.
!
!     For discussion of the eddy viscosity term, see documentation of 
!     subroutine "Liu_reverse_dispersion"
!
!     This subroutine expects eddy viscosity in units of m2/sec even
!     though values are given in units of cm2/sec in the Liu paper.
!
!  8. Structure :
!
!     See source code.
!
!  9. Switches :
!
!     !/S   Enable subroutine tracing.
!
! 10. Source code :
!
!/ ------------------------------------------------------------------- /
      USE CONSTANTS, ONLY: TPI
      USE W3ODATMD,  ONLY: NDSE
      USE W3SERVMD,  ONLY: EXTCDE
      USE W3DISPMD,  ONLY: WAVNU1
!/S      USE W3SERVMD,  ONLY: STRACE
!/
      IMPLICIT NONE
!/
!/ ------------------------------------------------------------------- /
!/ Parameter list
      REAL   , INTENT(IN)  :: H_ICE,H_WDEPTH,FWANTED
      REAL   , INTENT(IN)  :: VISC    ! in m2/sec
      REAL   , INTENT(OUT) :: K_SOLUTION,CG,ALPHA
!/
!/ ------------------------------------------------------------------- /
!/ Local parameters
!/S      INTEGER, SAVE     :: IENT = 0
      REAL, PARAMETER    :: FERRORMAX=1.0E-5  ! maximum acceptable error
      INTEGER, PARAMETER :: N_ITER=20  ! number of iterations prior to
                                       ! failure
      LOGICAL            :: GET_CG     ! indicates whether to get Cg
                                       ! and alpha 
                                       ! from "Liu_reverse_dispersion"
      REAL, ALLOCATABLE  :: FREQ(:)    ! wave frequency at current 
                                       ! iteration 
      REAL, ALLOCATABLE  :: KWN(:)     ! wavenumber at current 
                                       ! iteration 
      INTEGER            :: ITER       ! iteration number
      REAL               :: DK,DF,DFDK ! as name implies
      REAL               :: FDUMMY     ! as name implies
      REAL               :: SIGMA      ! 2*pi/T
      REAL               :: K_OPEN     ! open-water value of k
      REAL               :: CG_OPEN    ! open-water value of Cg
!/
!/ ------------------------------------------------------------------- /
!/
!/S      CALL STRACE (IENT, 'LIU_FORWARD_DISPERSION')
!
!/ 0) --- Initialize/allocate variables ------------------------------ /

      ALLOCATE ( FREQ(N_ITER) )
      ALLOCATE ( KWN(N_ITER) )

      GET_CG  = .FALSE.

!/T38      WRITE(*,*)'FORWARD IN: H_ICE,VISC,H_WDEPTH,FWANTED = ', &
!/T38                          H_ICE,VISC,H_WDEPTH,FWANTED

! First guess for k :
      SIGMA=FWANTED*TPI
      CALL WAVNU1(SIGMA,H_WDEPTH,K_OPEN,CG_OPEN)
!     KWN(1)  = 0.2 ! (old method)
      KWN(1)  =K_OPEN ! new method, Mar 10 2014
!
!/ 1) ----- Iteration loop to find k --------------------------------- /
      ITER = 0
      DF   = 999.
      DO WHILE ( ABS(DF).GE.FERRORMAX .AND. ITER.LE.N_ITER )
         ITER = ITER + 1
         ! compute freq for this iteration
         CALL LIU_REVERSE_DISPERSION(H_ICE,VISC,H_WDEPTH,KWN(ITER), &
                                     GET_CG,FREQ(ITER),CG,ALPHA)

         ! calculate dk
         IF (ITER == 1)THEN
            ! We do not have slope yet, so pick a number...
            DK = 0.01
         ELSEIF (ITER.EQ.N_ITER+1) THEN
            WRITE(NDSE,800) N_ITER
            CALL EXTCDE(2)
         ELSE
            ! use slope
            DFDK = (FREQ(ITER)-FREQ(ITER-1)) / (KWN(ITER)-KWN(ITER-1))
            DF   = FWANTED - FREQ(ITER)
!/T38       WRITE(*,*)'ITER = ',ITER,' ;  K = ',KWN(ITER),' ; F = ', &
!/T38                  FREQ(ITER),' ; DF = ',DF
            DK   = DF / DFDK
         ENDIF

         ! Decide on next k to try
         KWN(ITER+1) = KWN(ITER) + DK
         ! If we end up with a negative k for the next iteration, don't 
         !   allow this. 
         IF(KWN(ITER+1) < 0.0)THEN
            KWN(ITER+1) = TPI / 1000.0
         ENDIF

      ENDDO

!/ 2) -------- Finish up. -------------------------------------------- /
!     Success, so return K_SOLUTION, and call LIU_REVERSE_DISPERSION one
!     last time, to get CG and ALPHA

      K_SOLUTION = KWN(ITER)
      GET_CG     = .TRUE.
      CALL LIU_REVERSE_DISPERSION(H_ICE,VISC,H_WDEPTH,K_SOLUTION, &
           GET_CG,FDUMMY,CG,ALPHA)

      DEALLOCATE ( FREQ )
      DEALLOCATE ( KWN )
!
!/T38      WRITE(*,*)'FORWARD OUT: K_SOLUTION,CG,ALPHA = ', &
!/T38                          K_SOLUTION,CG,ALPHA
!/T38      IF (H_ICE==1.0)THEN
!/T38         WRITE(*,*)FWANTED,ALPHA
!/T38      ENDIF
!
  800 FORMAT (/' *** WAVEWATCH III ERROR IN '           &
               'W3SIC2_LIU_FORWARD_DISPERSION : ' /     &
               '     NO SOLUTION FOUND AFTER ',I4,' ITERATIONS.')
!/
!/ End of LIU_FORWARD_DISPERSION ------------------------------------- /
!/
      END SUBROUTINE LIU_FORWARD_DISPERSION
!/ ------------------------------------------------------------------- /
!/
      SUBROUTINE LIU_REVERSE_DISPERSION (H_ICE,VISC,H_WDEPTH,KWN &
             ,GET_CG,FREQ,CG,ALPHA)
!/
!/                  +-----------------------------------+
!/                  | WAVEWATCH III           NOAA/NCEP |
!/                  |        W. E. Rogers (NRL-SSC)     |
!/                  |                        FORTRAN 90 |
!/                  | Last update :         11-Oct-2013 |
!/                  +-----------------------------------+
!/
!/    12-Oct-2012 : Origination.                        ( version 4.04 )
!/                                                        (E. Rogers)
!/
!  1. Purpose :
!
!     Dispersion relation calculation: given k, find frequency.
!     This is for dispersion in ice, so it requires the ice thickness
!     and viscosity also. (the latter is the "eddy viscosity in the 
!     turbulent boundary layer beneath the ice.").
!
!     This subroutine also (optionally) calculates Cg and alpha.
!     alpha is the exponential decay rate of *energy*  (not to be 
!     confused with k_i which is the exponential decay rate of 
!     amplitude)
!     This calculation is optional for reasons of computational 
!      efficiency (don't calculate if it will not be used). Note that 
!      if Cg and alpha are not calculated, the value of input viscosity
!      is irrelevant.
!
!     References:
!       Liu et al.    1991: JGR 96 (C3), 4605-4621
!       Liu and Mollo 1988: JPO 18       1720-1712 
!
!  2. Method :
!
!     In 1991 paper, see equations on page 4606. The key equations are:
!     sigma2=(grav*k+B*k^5)/((coth(k*H_wdepth))+k*M);
!     Cg=(grav+(5+4*k*M)*(B*k^4))/((2*sigma)*((1+k*M)^2));
!     alpha=(sqrt(visc)*k*sqrt(sigma))/(Cg*sqrt(2)*(1+k*M));
!
!  3. Parameters :
!
!      Parameter list
!     ----------------------------------------------------------------
!      H_ICE     REAL    I  Ice thickness
!      VISC      REAL    I  Eddy viscosity (if GET_CG) (m2/sec)
!      H_WDEPTH  REAL    I  Water depth
!      KWN       REAL    I  Wavenumber
!      GET_CG    LOGICAL I  Indicates whether to calculate Cg and alpha
!      FREQ      REAL    O  Frequency
!      CG        REAL    O  Group velocity (if GET_CG)
!      ALPHA     REAL    O  Exponential decay rate of energy (if GET_CG)
!     ----------------------------------------------------------------
!
!  4. Subroutines used :
!
!      Name      Type  Module   Description
!     ----------------------------------------------------------------
!      STRACE    Subr. W3SERVMD Subroutine tracing.
!     ----------------------------------------------------------------
!
!  5. Called by :
!
!      Name                  | Type |  Module | Description
!     ----------------------------------------------------------------
!      Liu_forward_dispersion| Subr.| W3SIC2MD| As name implies. 
!     ----------------------------------------------------------------
!
!  6. Error messages :
!
!       None.
!
!  7. Remarks :
!
!     Eventually, k and Cg should be used for propagation. This is not 
!     implemented yet. For now, it is only used to calculate the source
!     term.
!
!     The eddy viscosity term given by Liu is unfortunately highly 
!     variable, and "not a physical parameter", which suggests that it
!     is difficult to specify in practice. In this paper, we see values
!     of:
!     nu= 160.0e-4 m2/sec (Brennecke (1921)
!     nu=  24.0e-4 m2/sec (Hunkins 1966)
!     nu=3450.0e-4 m2/sec (Fig 11)
!     nu=   4.0e-4 m2/sec (Fig 12)
!     nu= 150.0e-4 m2/sec (Fig 13)
!     nu=  54.0e-4 m2/sec (Fig 14)
!     nu= 384.0e-4 m2/sec (Fig 15)
!     nu=1536.0e-4 m2/sec (Fig 16)
!
!     The paper states: "The only tuning parameter is the turbulent eddy
!     viscosity, and it is a function of the flow conditions in the
!     turbulent boundary layer which are determined by the ice 
!     thickness, floe sizes, ice concentration, and wavelength."
!
!     Another criticism of this source term is that it does not use the 
!     ice concentration in actual calculations. The method appears to 
!     simply rely on concentration being high, "When the ice is highly
!     compact with high concentration, the flexural waves obey the 
!     dispersion relation (1) as similar waves in a continuous ice 
!     sheet." Later, "Five of these  cases with high ice conentration
!     (larger than 60%) in the MIZ have been selected"
!
!     This subroutine expects eddy viscosity in units of m2/sec even
!     though values are given in units of cm2/sec in the Liu paper.
!
!  8. Structure :
!
!     See source code.
!
!  9. Switches :
!
!     !/S   Enable subroutine tracing.
!
! 10. Source code :
!
!/ ------------------------------------------------------------------- /
      USE CONSTANTS, ONLY: DWAT, TPI, GRAV
!/S      USE W3SERVMD,  ONLY: STRACE
!/
      IMPLICIT NONE
!/
!/ ------------------------------------------------------------------- /
!/ Parameter list
      REAL   , INTENT(IN)  :: H_ICE,H_WDEPTH,KWN
      REAL   , INTENT(IN)  :: VISC    ! in m2/sec
      LOGICAL, INTENT(IN)  :: GET_CG
      REAL   , INTENT(OUT) :: FREQ,CG,ALPHA
!/
!/ ------------------------------------------------------------------- /
!/ Local parameters
!/S      INTEGER, SAVE     :: IENT = 0
      REAL, PARAMETER   :: E = 6.0E+9 ! Young's modulus of elasticity
      REAL, PARAMETER   :: S = 0.3    ! "s", Poisson's ratio
      REAL              :: DICE       ! "dice", density of ice
      REAL              :: B          ! quantifies effect of bending
                                      ! of ice
      REAL              :: M          ! quantifies effect of inertia
                                      ! of ice
      REAL              :: COTHTERM   ! temporary variable
      REAL              :: SIGMA      ! 2*pi/T
      REAL              :: KH         ! k*h
!/
!/ ------------------------------------------------------------------- /
!/
!/S      CALL STRACE (IENT, 'LIU_REVERSE_DISPERSION')
!
!/ 0) --- Initialize essential parameters ---------------------------- /
      CG    = 0.
      ALPHA = 0.
      FREQ  = 0.
      DICE = DWAT * 0.9 ! from Liu 1991 pg 4606

!/T38      WRITE(*,*)'REVERSE IN: H_ICE,VISC,H_WDEPTH,KWN,GET_CG = ', &
!/T38                          H_ICE,VISC,H_WDEPTH,KWN,GET_CG

!
!/ 1) --- Calculate frequency ---------------------------------------- /

! Note: Liu et al 1991 have "kwn*h_ice" in COTH(_) but I believe they
! meant to write "kwn*H_wdepth"

      B  = (E * H_ICE**3) / (12. * (1. - S**2) * DWAT)
      M  = DICE * H_ICE / DWAT
      KH = KWN * H_WDEPTH
      IF ( KH>5.0 ) THEN
         COTHTERM = 1.0
      ELSEIF ( KH<1.0E-4 ) THEN
         COTHTERM = 1.0 / KH
      ELSE
         COTHTERM = COSH(KH) / SINH(KH)
      ENDIF
      SIGMA = SQRT((GRAV * KWN + B * KWN**5) / (COTHTERM + KWN * M))
      FREQ  = SIGMA/(TPI)

!/ 2) --- Calculate Cg and alpha if requested ------------------------ /

      IF (GET_CG) THEN
         CG    = (GRAV + (5.0+4.0 * KWN * M) * (B * KWN**4)) &
               / (2.0 * SIGMA * ((1.0 + KWN * M)**2))
         ALPHA = (SQRT(VISC) * KWN * SQRT(SIGMA)) &
               / (CG * SQRT(2.0) * (1 + KWN * M))
      ENDIF

!/T38      WRITE(*,*)'REVERSE OUT: FREQ,CG,ALPHA = ',FREQ,CG,ALPHA

!/
!/ End of LIU_REVERSE_DISPERSION ------------------------------------- /
!/
      END SUBROUTINE LIU_REVERSE_DISPERSION
!/ ------------------------------------------------------------------- /
!/
!/ End of module W3SIC2MD -------------------------------------------- /
!/
      END MODULE W3SIC2MD
